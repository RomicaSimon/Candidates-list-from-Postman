{
	"info": {
		"_postman_id": "7535dd97-c09e-4b4e-b94a-39e80ae4966b",
		"name": "Candidates",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17857018"
	},
	"item": [
		{
			"name": "Get single candidate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct location\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.location).to.eql('Iasi');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.location).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.coursesCompleted).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test(\"Test array propreties\", () =>{\r",
							"    pm.expect(jsonData.coursesCompleted).to.include('Selenium');\r",
							"    pm.expect(jsonData.coursesCompleted).to.have.members([\"C++\", \"Selenium\"]);\r",
							"})\r",
							"\r",
							"pm.test(\"Correct values of the contact's fields\", () => {\r",
							"    //let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(2);\r",
							"    pm.expect(jsonData.name).to.eql('Andrei');\r",
							"    pm.expect(jsonData.location).to.eql('Iasi');\r",
							"    pm.expect(jsonData.phone).to.eql('0785875001');\r",
							"    pm.expect(jsonData.coursesCompleted[0]).to.eql('C++');\r",
							"    pm.expect(jsonData.coursesCompleted[1]).to.eql('Selenium');\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"coursesCompleted\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"coursesCompleted\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/candidates/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"candidates",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all candidates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/candidates",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"candidates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new candidate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct location\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.location).to.eql('Vaslui');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.location).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.coursesCompleted).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test(\"Test array propreties\", () =>{\r",
							"    pm.expect(jsonData.coursesCompleted).to.include('C#');\r",
							"    pm.expect(jsonData.coursesCompleted).to.have.members([\"C++\", \"C#\"]);\r",
							"})\r",
							"\r",
							"pm.test(\"Correct values of the contact's fields\", () => {\r",
							"    //let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(18);\r",
							"    pm.expect(jsonData.name).to.eql('Alex');\r",
							"    pm.expect(jsonData.location).to.eql('Vaslui');\r",
							"    pm.expect(jsonData.phone).to.eql('0785875001');\r",
							"    pm.expect(jsonData.coursesCompleted[0]).to.eql('C#');\r",
							"    pm.expect(jsonData.coursesCompleted[1]).to.eql('C++');\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"coursesCompleted\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"coursesCompleted\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"location\": \"Vaslui\",\r\n    \"phone\": \"0785875001\",\r\n    \"coursesCompleted\": [\r\n        \"C#\",\r\n        \"C++\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/candidates",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"candidates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit candidate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct location\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.location).to.eql('Deva');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.location).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.coursesCompleted).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test(\"Test array propreties\", () =>{\r",
							"    pm.expect(jsonData.coursesCompleted).to.include('Ruby');\r",
							"    pm.expect(jsonData.coursesCompleted).to.have.members([\"C++\", \"Ruby\"]);\r",
							"})\r",
							"\r",
							"pm.test(\"Correct values of the contact's fields\", () => {\r",
							"    //let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(7);\r",
							"    pm.expect(jsonData.name).to.eql('Ana-Maria');\r",
							"    pm.expect(jsonData.location).to.eql('Deva');\r",
							"    pm.expect(jsonData.phone).to.eql('0785875545');\r",
							"    pm.expect(jsonData.coursesCompleted[0]).to.eql('Ruby');\r",
							"    pm.expect(jsonData.coursesCompleted[1]).to.eql('C++');\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"coursesCompleted\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"coursesCompleted\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ana-Maria\",\r\n    \"location\": \"Deva\",\r\n    \"phone\": \"0785875545\",\r\n    \"coursesCompleted\": [\r\n        \"Ruby\",\r\n        \"C++\"\r\n    ],\r\n    \"id\": 7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/candidates/7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"candidates",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete candidate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 50ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ana-Maria\",\r\n    \"location\": \"Deva\",\r\n    \"phone\": \"0785875545\",\r\n    \"coursesCompleted\": [\r\n        \"Ruby\",\r\n        \"C++\"\r\n    ],\r\n    \"id\": 7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/candidates/6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"candidates",
						"6"
					]
				}
			},
			"response": []
		}
	]
}